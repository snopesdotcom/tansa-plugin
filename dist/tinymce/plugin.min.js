/**
 *
 * Tansa WordPress Extension
 *
 * Released under LGPL License.
 */
(function ($) {
	//var connectionMenuHTML = "<ul class='submenu' id='tansaSubMenu'><li><a class='thickbox' href='" + tansaExtensionInfo.pluginPath + "/javascriptapp/html/connection.html?TB_iframe=true&width=400px&height=500px' id='connectionMenu' >Connection</a></li></ul>";
	var loadingMenuTitle = 'Loading menu...';
	var loadingMenu = { text: loadingMenuTitle,  title: loadingMenuTitle };

	var pluginJSONObj = {
		menu : null,
        menuLoaded:false,

        /**
         * Initializes the plugin, this will be executed after the plugin has been created.
         * This call is done before the editor instance has finished it's initialization so use the onInit event
         * of the editor instance to intercept that event.
         *
         * @param {tinymce.Editor} ed Editor instance that the plugin is initialized in.
         * @param {string} url Absolute URL to where the plugin is located.
         */
        init:function (ed, url) {
			window.initTansaObject();

            var t = this;
            var editor = ed;
			 // Register buttons
            ed.addButton('tansaButton', {
                title : 'Tansa',
                id: 'tansaMenuButton',
                image : tansaExtensionInfo.pluginPath + '/img/TS.png',
                type: 'menubutton',
                menu:[ loadingMenu ],
                onclick : function(evt) {
                	t.initMenu(this);
                }
            });
        },

        initMenu:function(tansaMenuButton){
			window.initTansaObject();
			if(!tansa.settings.userId){
				tansaMenuButton.menu.hide();
			}
			else {
        	 var t = this;
        	 var callBackFun = function () {
        		 if (!t.menuLoaded) {
					 if(window.tansaMain){
						//tansa.settings.userGuid = tansaMain.userGuid;
						tansa.settings.browserName = tansa.settings.browserName || '';
						$.get(tansaMain.menuURL, tansaMain.getAPIQueryParameters(), function (response) {
							t.createAndLoadMenus(tansaMenuButton, response)
						});
					} 
					else {
						//t.createAndLoadMenus(tansaMenuButton, connectionMenuHTML)
						alert("Sorry! Something went wrong.");
					}
                 }
        	 };
        	 checkAndLoadMenuFromServer(callBackFun);
			}

		},
		
		createAndLoadMenus: function(tansaMenuButton, menuHTML){
			var menuHtmlElement = tansaMenuButton.menu.$el;
			$(menuHtmlElement).css('width', 'auto');
			var menuHtmlElementId = $(menuHtmlElement).attr('id');
			$('#' + menuHtmlElementId + '-body').empty();
			$('#' + menuHtmlElementId + '-body').css('width', 'auto');
			var menuItems = parseMenuResponse(menuHTML);
			tansaMenuButton.menu.add(menuItems);
			this.menuLoaded = true;
			tansaMenuButton.menu.renderNew();
			this.menu = tansaMenuButton.menu;
		},

        resetAllMenus: function(){
        	if(this.menuLoaded){
        		this.menu.hide();
				var menuHtmlElement = this.menu.$el;
				var menuHtmlElementId = $(menuHtmlElement).attr('id');
				$('#' + menuHtmlElementId + '-body').empty();
				this.menu.add(loadingMenu);
				this.menu.renderNew();
				this.menu.hide();

	        	this.menuLoaded = false;
        	}
        },

        /**
         * Returns information about the plugin as a name/value array.
         * The current keys are longname, author, authorurl, infourl and version.
         *
         * @return {Object} Name/value array containing information about the plugin.
         */
        getInfo:function () {
            return {
                longName:'Tansa WordPress Plugin',
				shortName: TANSA_EXT_NAME,
                author:'Tansa Systems AS',
                authorURL:'https://www.tansa.com/',
                infoURL:'https://www.tansa.com/about/',
                version: tansaExtensionInfo.version
            };
        }
    };

	function checkAndLoadMenuFromServer(callBack){
		window.tansaLoaderScriptCallBack = callBack;
		loadInitTansaLoaderScript();
	}

	function loadInitTansaLoaderScript(){
		var tansaLoaderScript = document.getElementById("tansaLoaderScript");
		if(!tansaLoaderScript){
			var initTansaLoaderScript = document.createElement('script');
			initTansaLoaderScript.src = tansa.settings.baseUrl + 'initTansaLoader.js?' + new Date().getTime();
			initTansaLoaderScript.async = false;
			initTansaLoaderScript.onerror = function(err){				
				window.tansaLoaderScriptCallBack();
			};
			document.querySelector('head').appendChild(initTansaLoaderScript);
		}
		else {
			if(window.tansaLoaderScriptCallBack)
				window.tansaLoaderScriptCallBack();
		}
	}

	function parseMenuResponse(response){
    	var menuItems=[];
    	var results = $(response).find('li');
    	$(results).each(function() {
    		var result = $(this).find('a');
    		var menuItem = {};
    		menuItem.data = {};
			if(result.length > 0 && result[0].attributes.length > 0){
				menuItem.data.href = $(result).attr('href');

				menuItem.data.profileId = $(result).attr('data-profileid');
				menuItem.data.profileTitle = $(result).attr('data-profiletitle');
				menuItem.data.profileLangCode = $(result).attr('data-profilelangcode');
				menuItem.data.serviceName = $(result).attr('data-servicename');
				menuItem.data.menuId = $(result).attr('id');

				menuItem.data.menuTitle = $(result).html();
				menuItem.text = result[0].text;

				if(menuItem.data.menuId == 'clearHyphenationPointsMenu'){
					menuItem.onclick = function(){
						removeHyphenationPoints();
					};
				}
				else if(menuItem.data.menuId == 'aboutMenu'){
					menuItem.onclick = function() {
						tansaMain.showAboutDialog(menuItem.data.href, menuItem.data.menuTitle);
					}
				}
				else if(menuItem.data.menuId == 'connectionMenu'){
					menuItem.onclick = function() {
						showConnectionDialog();
					}
				}
				else if (menuItem.data.href && menuItem.data.href != "" && menuItem.data.href != "#") {
					menuItem.onClick = function() { window.open(menuItem.data.href, '_blank') };
		        }
				else{
					menuItem.onclick = function() {
						var menuData = this.data.data;
						runTansaProofing(menuData);
					};
				}
				menuItems.push(menuItem);
			}
			else if(result.length == 0 && $(this).text() == '-'){
				menuItem.data.menuTitle = '-';
				menuItem.text = '-';
				menuItems.push(menuItem);
			}

    	});
    	return menuItems;
    }

	function removeHyphenationPoints(){
		tansaMain.removeHyphenationPoints();
	}

	function showConnectionDialog(){
		var dialogElement = document.getElementById("showConnectionDialog");
		if(!dialogElement){
			dialogElement = document.createElement('a');
			$(dialogElement).attr('class', "thickbox");
			$(dialogElement).attr('style', "display:none");
			dialogElement.id = "showConnectionDialog";
			dialogElement.href = tansaExtensionInfo.pluginPath + "/javascriptapp/html/connection.html?TB_iframe=true&width=400px&height=500px";
			dialogElement = document.querySelector('body').appendChild(dialogElement);
		}
		dialogElement.click();
	}

    function runTansaProofing (selectedMenu){
    	var profileId = selectedMenu.profileId;
    	var serviceName = selectedMenu.serviceName
    	var tansaDialogTitle = selectedMenu.profileTitle;
    	var profileLangCode = selectedMenu.profileLangCode;
    	var profileTitle = selectedMenu.profileTitle;

    	tansaMain.onRunTansaProofing({
				  'profileId': profileId,
    			  'serviceName': serviceName ,
    			  'profileLangCode': profileLangCode ,
    			  'userId': tansa.settings.userId,
    			  'theme': tansa.settings.theme,
    			  'langCode': tansa.settings.langCode,
    			  'profileTitle': profileTitle,
				  'extensionName': tansa.settings.extensionName,
				  'extensionVersion': tansa.settings.extensionVersion
    	});
    }

	tinymce.create('tinymce.plugins.TansaPlugin', pluginJSONObj);
    tinymce.PluginManager.add('tansa', tinymce.plugins.TansaPlugin);

})(window.$ || window.jQuery || window.tansaJQuery);
